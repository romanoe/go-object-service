// Package objects provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package objects

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return all objects
	// (GET /objects)
	FindObjects(ctx echo.Context) error
	// Add a new object
	// (POST /objects)
	AddNewObject(ctx echo.Context) error
	// Delete object
	// (DELETE /objects/{id})
	DeleteObjectByID(ctx echo.Context, id int64) error
	// Returns an object by ID
	// (GET /objects/{id})
	FindObjectByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindObjects converts echo context to params.
func (w *ServerInterfaceWrapper) FindObjects(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindObjects(ctx)
	return err
}

// AddNewObject converts echo context to params.
func (w *ServerInterfaceWrapper) AddNewObject(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddNewObject(ctx)
	return err
}

// DeleteObjectByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteObjectByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteObjectByID(ctx, id)
	return err
}

// FindObjectByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindObjectByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindObjectByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/objects", wrapper.FindObjects)
	router.POST(baseURL+"/objects", wrapper.AddNewObject)
	router.DELETE(baseURL+"/objects/:id", wrapper.DeleteObjectByID)
	router.GET(baseURL+"/objects/:id", wrapper.FindObjectByID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yU32/bOAzH/xWCd0DvAF+S3oo9+C1DtiHA0AzD9lQEg2oxMQtbcik5QRb4fx8kO3V+",
	"dutetjdbFEXy8yW5xcyWlTVkvMN0iy7LqVTx85bWs/sHynz4qcRWJJ4pmjIh5Ul/VdGmyWXClWdrMMXW",
	"58pBvMTWgFaeMMGFlTI4YPj/z3MZDv2mIkzReWGzxGZ3cPHRaD5xaxIUeqxZSGN6h92lvSznTYJ9Maoo",
	"ZgtM77b4t9ACU/xr2FMYdgiGff1NcgyA9TM51oYfa4LpZL9oNv71TZ85G09LkpPUWeO8mTfhmM3Cnkb5",
	"nLOD8ccpqKKwawdCSrNZgjIa1sI+fL+fvf0wvp2AjRm5EJV9EcIeWaDkTKwjWXEWiK1IXBvmejAajIIe",
	"tiKjKsYUXw2uByNMsFI+jxCGu/fTLS7pTCt8Ii9MK3LgcwLWYBch7b28AtPYJFONKb5jo2dPNiFXWeNa",
	"4P+PRrHxrPFkWhGrquAsOg8fXIi3694okKcyOj6n8JO8O1WUiNpgpH9OWwe5WhHcExmQrjYdJXR1WSrZ",
	"tDXXYg7KbBKsrDvDZ6w1KDC07q7CP6wT6Ns2ie3+7wmnsdZ9c56Auv79oCBXrsXUFXME6bjwaN6103DL",
	"umlhFeTPLINJPAdldtjulSMN1oACx2ZZdLN3CK31avN7s4kXKiWqJE/i4jI4jDKdhHbtIngLC/JZjmEs",
	"MY0zgAkaVcZh1rg/xV5qSvYQ/3gHzE9EvLlUtg4q3LQiH9q/GFX73Ap/210688h0AsZ6WNjaHIvSYbVP",
	"Wl+a6VqMeyn9frT/fPYv2zQ/MzeX5uQq7O829q8odkaLTYDfNE3zPQAA//9J+kUN2QcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
